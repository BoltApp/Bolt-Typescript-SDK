/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Orders extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create an order that was placed outside the Bolt ecosystem.
     *
     * @remarks
     * Create an order that was placed outside the Bolt ecosystem.
     *
     */
    async ordersCreate(
        security: operations.OrdersCreateSecurity,
        xPublishableKey: string,
        order: components.Order,
        options?: RequestOptions
    ): Promise<operations.OrdersCreateResponse> {
        const input$: operations.OrdersCreateRequest = {
            xPublishableKey: xPublishableKey,
            order: order,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.OrdersCreateRequest$.outboundSchema.parse(input$);

        const body$ = enc$.encodeJSON("body", payload$.order, { explode: true });

        const path$ = this.templateURLComponent("/orders")();

        headers$.set(
            "X-Publishable-Key",
            enc$.encodeSimple("X-Publishable-Key", payload$["X-Publishable-Key"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const securitySettings$ = this.resolveSecurity([
            { value: security?.apiKey, fieldName: "X-API-Key", type: "apiKey:header" },
        ]);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.OrdersCreateResponse$.inboundSchema.parse({
                ...responseFields$,
                "order-response": responseBody,
            });
            return result;
        } else if (this.matchResponse(response, "4XX", "application/json")) {
            const responseBody = await response.json();
            const result = errors.OrdersCreateResponseBody$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else if (this.matchStatusCode(response, "default")) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.OrdersCreateResponse$.inboundSchema.parse(responseFields$);
    }
}
