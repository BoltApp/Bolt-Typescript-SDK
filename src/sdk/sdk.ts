/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { Account } from "./account.js";
import { OAuth } from "./oauth.js";
import { Orders } from "./orders.js";
import { Payments } from "./payments.js";
import { Testing } from "./testing.js";

export class BoltTypescriptSDK extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _account?: Account;
    get account(): Account {
        return (this._account ??= new Account(this.options$));
    }

    private _payments?: Payments;
    get payments(): Payments {
        return (this._payments ??= new Payments(this.options$));
    }

    private _orders?: Orders;
    get orders(): Orders {
        return (this._orders ??= new Orders(this.options$));
    }

    private _oAuth?: OAuth;
    get oAuth(): OAuth {
        return (this._oAuth ??= new OAuth(this.options$));
    }

    private _testing?: Testing;
    get testing(): Testing {
        return (this._testing ??= new Testing(this.options$));
    }
}
