/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { SecurityInput } from "../lib/security.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";

export class Testing extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create a test account
     *
     * @remarks
     * Create a Bolt shopper account for testing purposes.
     *
     */
    async createAccount(
        security: operations.TestingAccountCreateSecurity,
        xPublishableKey: string,
        accountTestCreationData: components.AccountTestCreationData,
        options?: RequestOptions
    ): Promise<operations.TestingAccountCreateResponse> {
        const input$: operations.TestingAccountCreateRequest = {
            xPublishableKey: xPublishableKey,
            accountTestCreationData: accountTestCreationData,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.TestingAccountCreateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$["account-test-creation-data"], {
            explode: true,
        });

        const path$ = this.templateURLComponent("/testing/accounts")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "X-Publishable-Key": encodeSimple$("X-Publishable-Key", payload$["X-Publishable-Key"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "X-API-Key",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "testingAccountCreate",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.TestingAccountCreateResponse>()
            .json(200, operations.TestingAccountCreateResponse$, {
                key: "account-test-creation-data",
            })
            .json("4XX", errors.TestingAccountCreateResponseBody$, { err: true })
            .fail("5XX")
            .void("default", operations.TestingAccountCreateResponse$)
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get a random phone number
     *
     * @remarks
     * Get a random, fictitious phone number that is not assigned to any existing account.
     *
     */
    async testingAccountPhoneGet(
        security: operations.TestingAccountPhoneGetSecurity,
        xPublishableKey: string,
        options?: RequestOptions
    ): Promise<operations.TestingAccountPhoneGetResponse> {
        const input$: operations.TestingAccountPhoneGetRequest = {
            xPublishableKey: xPublishableKey,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.TestingAccountPhoneGetRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/testing/accounts/phones")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
            "X-Publishable-Key": encodeSimple$("X-Publishable-Key", payload$["X-Publishable-Key"], {
                explode: false,
                charEncoding: "none",
            }),
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "X-API-Key",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "testingAccountPhoneGet",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.TestingAccountPhoneGetResponse>()
            .json(200, operations.TestingAccountPhoneGetResponse$, {
                key: "account-test-phone-data",
            })
            .json("4XX", errors.TestingAccountPhoneGetResponseBody$, { err: true })
            .fail("5XX")
            .void("default", operations.TestingAccountPhoneGetResponse$)
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Retrieve a test credit card, including its token
     *
     * @remarks
     * Retrieve test credit card information. This includes its token, which can be used to process payments.
     *
     */
    async getCreditCard(
        request: operations.TestingCreditCardGetRequestBody,
        security: operations.TestingCreditCardGetSecurity,
        options?: RequestOptions
    ): Promise<operations.TestingCreditCardGetResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.TestingCreditCardGetRequestBody$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/testing/credit-cards")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "X-API-Key",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "testingCreditCardGet",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<operations.TestingCreditCardGetResponse>()
            .json(200, operations.TestingCreditCardGetResponse$, { key: "test-credit-card" })
            .json("4XX", errors.TestingCreditCardGetResponseBody$, { err: true })
            .fail("5XX")
            .void("default", operations.TestingCreditCardGetResponse$)
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
