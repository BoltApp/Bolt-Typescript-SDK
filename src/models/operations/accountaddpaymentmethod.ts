/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type AccountAddPaymentMethodRequest = {
    /**
     * The publicly viewable identifier used to identify a merchant division.
     */
    xPublishableKey: string;
    paymentMethod: components.PaymentMethodInput;
};

export type AccountAddPaymentMethodResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The payment method was successfully added
     */
    paymentMethod?: components.PaymentMethod | undefined;
};

/** @internal */
export namespace AccountAddPaymentMethodRequest$ {
    export type Inbound = {
        "X-Publishable-Key": string;
        "payment-method": components.PaymentMethodInput$.Inbound;
    };

    export const inboundSchema: z.ZodType<AccountAddPaymentMethodRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "X-Publishable-Key": z.string(),
            "payment-method": components.PaymentMethodInput$.inboundSchema,
        })
        .transform((v) => {
            return {
                xPublishableKey: v["X-Publishable-Key"],
                paymentMethod: v["payment-method"],
            };
        });

    export type Outbound = {
        "X-Publishable-Key": string;
        "payment-method": components.PaymentMethodInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountAddPaymentMethodRequest> =
        z
            .object({
                xPublishableKey: z.string(),
                paymentMethod: components.PaymentMethodInput$.outboundSchema,
            })
            .transform((v) => {
                return {
                    "X-Publishable-Key": v.xPublishableKey,
                    "payment-method": v.paymentMethod,
                };
            });
}

/** @internal */
export namespace AccountAddPaymentMethodResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        "payment-method"?: components.PaymentMethod$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AccountAddPaymentMethodResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                "payment-method": components.PaymentMethod$.inboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v["payment-method"] === undefined
                        ? null
                        : { paymentMethod: v["payment-method"] }),
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        "payment-method"?: components.PaymentMethod$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AccountAddPaymentMethodResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            paymentMethod: components.PaymentMethod$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.paymentMethod === undefined ? null : { "payment-method": v.paymentMethod }),
            };
        });
}
