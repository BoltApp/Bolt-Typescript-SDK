/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PaymentsInitializeRequest = {
  /**
   * The publicly shareable identifier used to identify your Bolt merchant division.
   */
  xPublishableKey: string;
  /**
   * A unique identifier for a shopper's device, generated by Bolt. The value is retrieved with `Bolt.state.merchantClientId` in your frontend context, per-shopper. This header is required for proper attribution of this operation to your analytics reports. Omitting this header may result in incorrect statistics.
   */
  xMerchantClientId?: string | undefined;
  paymentInitializeRequest: components.PaymentInitializeRequest;
};

export type PaymentsInitializeResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * The payment was successfully initialized, and was either immediately finalized or is pending
   */
  paymentResponse?: components.PaymentResponse | undefined;
};

/** @internal */
export const PaymentsInitializeRequest$inboundSchema: z.ZodType<
  PaymentsInitializeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Publishable-Key": z.string(),
  "X-Merchant-Client-Id": z.string().optional(),
  "payment-initialize-request":
    components.PaymentInitializeRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "X-Publishable-Key": "xPublishableKey",
    "X-Merchant-Client-Id": "xMerchantClientId",
    "payment-initialize-request": "paymentInitializeRequest",
  });
});

/** @internal */
export type PaymentsInitializeRequest$Outbound = {
  "X-Publishable-Key": string;
  "X-Merchant-Client-Id"?: string | undefined;
  "payment-initialize-request": components.PaymentInitializeRequest$Outbound;
};

/** @internal */
export const PaymentsInitializeRequest$outboundSchema: z.ZodType<
  PaymentsInitializeRequest$Outbound,
  z.ZodTypeDef,
  PaymentsInitializeRequest
> = z.object({
  xPublishableKey: z.string(),
  xMerchantClientId: z.string().optional(),
  paymentInitializeRequest: components.PaymentInitializeRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xPublishableKey: "X-Publishable-Key",
    xMerchantClientId: "X-Merchant-Client-Id",
    paymentInitializeRequest: "payment-initialize-request",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsInitializeRequest$ {
  /** @deprecated use `PaymentsInitializeRequest$inboundSchema` instead. */
  export const inboundSchema = PaymentsInitializeRequest$inboundSchema;
  /** @deprecated use `PaymentsInitializeRequest$outboundSchema` instead. */
  export const outboundSchema = PaymentsInitializeRequest$outboundSchema;
  /** @deprecated use `PaymentsInitializeRequest$Outbound` instead. */
  export type Outbound = PaymentsInitializeRequest$Outbound;
}

export function paymentsInitializeRequestToJSON(
  paymentsInitializeRequest: PaymentsInitializeRequest,
): string {
  return JSON.stringify(
    PaymentsInitializeRequest$outboundSchema.parse(paymentsInitializeRequest),
  );
}

export function paymentsInitializeRequestFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsInitializeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsInitializeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsInitializeRequest' from JSON`,
  );
}

/** @internal */
export const PaymentsInitializeResponse$inboundSchema: z.ZodType<
  PaymentsInitializeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  "payment-response": components.PaymentResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "payment-response": "paymentResponse",
  });
});

/** @internal */
export type PaymentsInitializeResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "payment-response"?: components.PaymentResponse$Outbound | undefined;
};

/** @internal */
export const PaymentsInitializeResponse$outboundSchema: z.ZodType<
  PaymentsInitializeResponse$Outbound,
  z.ZodTypeDef,
  PaymentsInitializeResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  paymentResponse: components.PaymentResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    paymentResponse: "payment-response",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsInitializeResponse$ {
  /** @deprecated use `PaymentsInitializeResponse$inboundSchema` instead. */
  export const inboundSchema = PaymentsInitializeResponse$inboundSchema;
  /** @deprecated use `PaymentsInitializeResponse$outboundSchema` instead. */
  export const outboundSchema = PaymentsInitializeResponse$outboundSchema;
  /** @deprecated use `PaymentsInitializeResponse$Outbound` instead. */
  export type Outbound = PaymentsInitializeResponse$Outbound;
}

export function paymentsInitializeResponseToJSON(
  paymentsInitializeResponse: PaymentsInitializeResponse,
): string {
  return JSON.stringify(
    PaymentsInitializeResponse$outboundSchema.parse(paymentsInitializeResponse),
  );
}

export function paymentsInitializeResponseFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsInitializeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsInitializeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsInitializeResponse' from JSON`,
  );
}
