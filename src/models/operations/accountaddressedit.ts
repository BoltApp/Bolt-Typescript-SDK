/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type AccountAddressEditRequest = {
    /**
     * The ID of the address to edit
     */
    id: string;
    /**
     * The publicly viewable identifier used to identify a merchant division.
     */
    xPublishableKey: string;
    addressListing: components.AddressListingInput;
};

export type AccountAddressEditResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The address was successfully edited
     */
    addressListing?: components.AddressListing | undefined;
};

/** @internal */
export namespace AccountAddressEditRequest$ {
    export type Inbound = {
        id: string;
        "X-Publishable-Key": string;
        "address-listing": components.AddressListingInput$.Inbound;
    };

    export const inboundSchema: z.ZodType<AccountAddressEditRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            "X-Publishable-Key": z.string(),
            "address-listing": components.AddressListingInput$.inboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                xPublishableKey: v["X-Publishable-Key"],
                addressListing: v["address-listing"],
            };
        });

    export type Outbound = {
        id: string;
        "X-Publishable-Key": string;
        "address-listing": components.AddressListingInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountAddressEditRequest> = z
        .object({
            id: z.string(),
            xPublishableKey: z.string(),
            addressListing: components.AddressListingInput$.outboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                "X-Publishable-Key": v.xPublishableKey,
                "address-listing": v.addressListing,
            };
        });
}

/** @internal */
export namespace AccountAddressEditResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        "address-listing"?: components.AddressListing$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AccountAddressEditResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            "address-listing": components.AddressListing$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v["address-listing"] === undefined
                    ? null
                    : { addressListing: v["address-listing"] }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        "address-listing"?: components.AddressListing$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountAddressEditResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            addressListing: components.AddressListing$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.addressListing === undefined
                    ? null
                    : { "address-listing": v.addressListing }),
            };
        });
}
