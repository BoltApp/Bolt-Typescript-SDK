/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GuestPaymentsUpdateSecurity = {
    apiKey: string;
};

export type GuestPaymentsUpdateRequest = {
    /**
     * The ID of the guest payment to update
     */
    id: string;
    /**
     * The publicly viewable identifier used to identify a merchant division.
     */
    xPublishableKey: string;
    paymentUpdateRequest: components.PaymentUpdateRequest;
};

export type GuestPaymentsUpdateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The pending payment was successfully updated
     */
    paymentResponse?: components.PaymentResponse | undefined;
};

/** @internal */
export namespace GuestPaymentsUpdateSecurity$ {
    export const inboundSchema: z.ZodType<GuestPaymentsUpdateSecurity, z.ZodTypeDef, unknown> = z
        .object({
            "api-key": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "api-key": "apiKey",
            });
        });

    export type Outbound = {
        "api-key": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GuestPaymentsUpdateSecurity> = z
        .object({
            apiKey: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKey: "api-key",
            });
        });
}

/** @internal */
export namespace GuestPaymentsUpdateRequest$ {
    export const inboundSchema: z.ZodType<GuestPaymentsUpdateRequest, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            "X-Publishable-Key": z.string(),
            "payment-update-request": components.PaymentUpdateRequest$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "X-Publishable-Key": "xPublishableKey",
                "payment-update-request": "paymentUpdateRequest",
            });
        });

    export type Outbound = {
        id: string;
        "X-Publishable-Key": string;
        "payment-update-request": components.PaymentUpdateRequest$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GuestPaymentsUpdateRequest> = z
        .object({
            id: z.string(),
            xPublishableKey: z.string(),
            paymentUpdateRequest: components.PaymentUpdateRequest$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xPublishableKey: "X-Publishable-Key",
                paymentUpdateRequest: "payment-update-request",
            });
        });
}

/** @internal */
export namespace GuestPaymentsUpdateResponse$ {
    export const inboundSchema: z.ZodType<GuestPaymentsUpdateResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            "payment-response": components.PaymentResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                "payment-response": "paymentResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        "payment-response"?: components.PaymentResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GuestPaymentsUpdateResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            paymentResponse: components.PaymentResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                paymentResponse: "payment-response",
            });
        });
}
