/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AccountGetRequest = {
    /**
     * The publicly viewable identifier used to identify a merchant division.
     */
    xPublishableKey: string;
};

export type AccountGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The account details were successfully retrieved
     */
    account?: components.Account | undefined;
};

/** @internal */
export const AccountGetRequest$inboundSchema: z.ZodType<AccountGetRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            "X-Publishable-Key": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Publishable-Key": "xPublishableKey",
            });
        });

/** @internal */
export type AccountGetRequest$Outbound = {
    "X-Publishable-Key": string;
};

/** @internal */
export const AccountGetRequest$outboundSchema: z.ZodType<
    AccountGetRequest$Outbound,
    z.ZodTypeDef,
    AccountGetRequest
> = z
    .object({
        xPublishableKey: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            xPublishableKey: "X-Publishable-Key",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountGetRequest$ {
    /** @deprecated use `AccountGetRequest$inboundSchema` instead. */
    export const inboundSchema = AccountGetRequest$inboundSchema;
    /** @deprecated use `AccountGetRequest$outboundSchema` instead. */
    export const outboundSchema = AccountGetRequest$outboundSchema;
    /** @deprecated use `AccountGetRequest$Outbound` instead. */
    export type Outbound = AccountGetRequest$Outbound;
}

/** @internal */
export const AccountGetResponse$inboundSchema: z.ZodType<
    AccountGetResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        account: components.Account$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type AccountGetResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    account?: components.Account$Outbound | undefined;
};

/** @internal */
export const AccountGetResponse$outboundSchema: z.ZodType<
    AccountGetResponse$Outbound,
    z.ZodTypeDef,
    AccountGetResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        account: components.Account$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountGetResponse$ {
    /** @deprecated use `AccountGetResponse$inboundSchema` instead. */
    export const inboundSchema = AccountGetResponse$inboundSchema;
    /** @deprecated use `AccountGetResponse$outboundSchema` instead. */
    export const outboundSchema = AccountGetResponse$outboundSchema;
    /** @deprecated use `AccountGetResponse$Outbound` instead. */
    export type Outbound = AccountGetResponse$Outbound;
}
