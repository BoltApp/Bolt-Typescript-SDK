/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type TestingCreditCardGetSecurity = {
    apiKey: string;
};

/**
 * The expected authorization result when using the generated token for a payment.
 */
export enum Type {
    Approve = "approve",
    Decline = "decline",
}

export type TestingCreditCardGetRequestBody = {
    /**
     * The expected authorization result when using the generated token for a payment.
     */
    type: Type;
};

export type TestingCreditCardGetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successfully generated test credit card details
     */
    testCreditCard?: components.TestCreditCard | undefined;
};

/** @internal */
export namespace TestingCreditCardGetSecurity$ {
    export const inboundSchema: z.ZodType<TestingCreditCardGetSecurity, z.ZodTypeDef, unknown> = z
        .object({
            "api-key": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "api-key": "apiKey",
            });
        });

    export type Outbound = {
        "api-key": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TestingCreditCardGetSecurity> = z
        .object({
            apiKey: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKey: "api-key",
            });
        });
}

/** @internal */
export namespace Type$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);
    export const outboundSchema: z.ZodNativeEnum<typeof Type> = inboundSchema;
}

/** @internal */
export namespace TestingCreditCardGetRequestBody$ {
    export const inboundSchema: z.ZodType<TestingCreditCardGetRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            type: Type$.inboundSchema,
        });

    export type Outbound = {
        type: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TestingCreditCardGetRequestBody
    > = z.object({
        type: Type$.outboundSchema,
    });
}

/** @internal */
export namespace TestingCreditCardGetResponse$ {
    export const inboundSchema: z.ZodType<TestingCreditCardGetResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            "test-credit-card": components.TestCreditCard$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                "test-credit-card": "testCreditCard",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        "test-credit-card"?: components.TestCreditCard$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TestingCreditCardGetResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            testCreditCard: components.TestCreditCard$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                testCreditCard: "test-credit-card",
            });
        });
}
