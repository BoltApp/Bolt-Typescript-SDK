/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GuestPaymentsInitializeSecurity = {
    apiKey: string;
};

export type GuestPaymentsInitializeRequest = {
    /**
     * The publicly viewable identifier used to identify a merchant division.
     */
    xPublishableKey: string;
    guestPaymentInitializeRequest: components.GuestPaymentInitializeRequest;
};

export type GuestPaymentsInitializeResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * The payment was successfully initialized, and was either immediately finalized or is pending
     */
    paymentResponse?: components.PaymentResponse | undefined;
};

/** @internal */
export namespace GuestPaymentsInitializeSecurity$ {
    export const inboundSchema: z.ZodType<GuestPaymentsInitializeSecurity, z.ZodTypeDef, unknown> =
        z
            .object({
                "api-key": z.string(),
            })
            .transform((v) => {
                return remap$(v, {
                    "api-key": "apiKey",
                });
            });

    export type Outbound = {
        "api-key": string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GuestPaymentsInitializeSecurity
    > = z
        .object({
            apiKey: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                apiKey: "api-key",
            });
        });
}

/** @internal */
export namespace GuestPaymentsInitializeRequest$ {
    export const inboundSchema: z.ZodType<GuestPaymentsInitializeRequest, z.ZodTypeDef, unknown> = z
        .object({
            "X-Publishable-Key": z.string(),
            "guest-payment-initialize-request":
                components.GuestPaymentInitializeRequest$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "X-Publishable-Key": "xPublishableKey",
                "guest-payment-initialize-request": "guestPaymentInitializeRequest",
            });
        });

    export type Outbound = {
        "X-Publishable-Key": string;
        "guest-payment-initialize-request": components.GuestPaymentInitializeRequest$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GuestPaymentsInitializeRequest> =
        z
            .object({
                xPublishableKey: z.string(),
                guestPaymentInitializeRequest:
                    components.GuestPaymentInitializeRequest$.outboundSchema,
            })
            .transform((v) => {
                return remap$(v, {
                    xPublishableKey: "X-Publishable-Key",
                    guestPaymentInitializeRequest: "guest-payment-initialize-request",
                });
            });
}

/** @internal */
export namespace GuestPaymentsInitializeResponse$ {
    export const inboundSchema: z.ZodType<GuestPaymentsInitializeResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                "payment-response": components.PaymentResponse$.inboundSchema.optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    ContentType: "contentType",
                    StatusCode: "statusCode",
                    RawResponse: "rawResponse",
                    "payment-response": "paymentResponse",
                });
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        "payment-response"?: components.PaymentResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GuestPaymentsInitializeResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            paymentResponse: components.PaymentResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                paymentResponse: "payment-response",
            });
        });
}
