/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TransactionAuthorization,
  TransactionAuthorization$inboundSchema,
  TransactionAuthorization$Outbound,
  TransactionAuthorization$outboundSchema,
} from "./transactionauthorization.js";

export type Transaction = {
  reference?: string | undefined;
  /**
   * Payment authorization events attached to a transaction
   */
  authorizations?: Array<TransactionAuthorization> | undefined;
};

/** @internal */
export const Transaction$inboundSchema: z.ZodType<
  Transaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  reference: z.string().optional(),
  authorizations: z.array(TransactionAuthorization$inboundSchema).optional(),
});

/** @internal */
export type Transaction$Outbound = {
  reference?: string | undefined;
  authorizations?: Array<TransactionAuthorization$Outbound> | undefined;
};

/** @internal */
export const Transaction$outboundSchema: z.ZodType<
  Transaction$Outbound,
  z.ZodTypeDef,
  Transaction
> = z.object({
  reference: z.string().optional(),
  authorizations: z.array(TransactionAuthorization$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transaction$ {
  /** @deprecated use `Transaction$inboundSchema` instead. */
  export const inboundSchema = Transaction$inboundSchema;
  /** @deprecated use `Transaction$outboundSchema` instead. */
  export const outboundSchema = Transaction$outboundSchema;
  /** @deprecated use `Transaction$Outbound` instead. */
  export type Outbound = Transaction$Outbound;
}

export function transactionToJSON(transaction: Transaction): string {
  return JSON.stringify(Transaction$outboundSchema.parse(transaction));
}

export function transactionFromJSON(
  jsonString: string,
): SafeParseResult<Transaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transaction' from JSON`,
  );
}
