/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum PaymentResponsePendingTag {
    Pending = "pending",
}

export enum PaymentResponsePendingStatus {
    AwaitingUserConfirmation = "awaiting_user_confirmation",
}

export enum Action {
    Redirect = "redirect",
}

export type PaymentResponsePending = {
    dotTag: PaymentResponsePendingTag;
    id?: string | undefined;
    status: PaymentResponsePendingStatus;
    action: Action;
    url: string;
};

/** @internal */
export namespace PaymentResponsePendingTag$ {
    export const inboundSchema = z.nativeEnum(PaymentResponsePendingTag);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentResponsePendingStatus$ {
    export const inboundSchema = z.nativeEnum(PaymentResponsePendingStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Action$ {
    export const inboundSchema = z.nativeEnum(Action);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentResponsePending$ {
    export const inboundSchema: z.ZodType<PaymentResponsePending, z.ZodTypeDef, unknown> = z
        .object({
            ".tag": PaymentResponsePendingTag$.inboundSchema,
            id: z.string().optional(),
            status: PaymentResponsePendingStatus$.inboundSchema,
            action: Action$.inboundSchema,
            url: z.string(),
        })
        .transform((v) => {
            return {
                dotTag: v[".tag"],
                ...(v.id === undefined ? null : { id: v.id }),
                status: v.status,
                action: v.action,
                url: v.url,
            };
        });

    export type Outbound = {
        ".tag": string;
        id?: string | undefined;
        status: string;
        action: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentResponsePending> = z
        .object({
            dotTag: PaymentResponsePendingTag$.outboundSchema,
            id: z.string().optional(),
            status: PaymentResponsePendingStatus$.outboundSchema,
            action: Action$.outboundSchema,
            url: z.string(),
        })
        .transform((v) => {
            return {
                ".tag": v.dotTag,
                ...(v.id === undefined ? null : { id: v.id }),
                status: v.status,
                action: v.action,
                url: v.url,
            };
        });
}
