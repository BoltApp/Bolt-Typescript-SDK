/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { Amount, Amount$ } from "./amount.js";
import { CartDiscount, CartDiscount$ } from "./cartdiscount.js";
import { CartItem, CartItem$ } from "./cartitem.js";
import { CartShipment, CartShipment$ } from "./cartshipment.js";
import * as z from "zod";

export type Cart = {
    /**
     * This value is used by Bolt as an external reference to a given order. This reference must be unique per successful transaction.
     */
    orderReference: string;
    /**
     * Used optionally to pass additional information like order numbers or other IDs as needed.
     */
    orderDescription?: string | undefined;
    /**
     * A shopper-facing identifier corresponding to the order reference associated with this transaction.
     */
    displayId?: string | undefined;
    shipments?: Array<CartShipment> | undefined;
    discounts?: Array<CartDiscount> | undefined;
    items?: Array<CartItem> | undefined;
    /**
     * A monetary amount, i.e. a base unit amount and a supported currency.
     */
    total: Amount;
    /**
     * A monetary amount, i.e. a base unit amount and a supported currency.
     */
    tax: Amount;
};

/** @internal */
export namespace Cart$ {
    export const inboundSchema: z.ZodType<Cart, z.ZodTypeDef, unknown> = z
        .object({
            order_reference: z.string(),
            order_description: z.string().optional(),
            display_id: z.string().optional(),
            shipments: z.array(CartShipment$.inboundSchema).optional(),
            discounts: z.array(CartDiscount$.inboundSchema).optional(),
            items: z.array(CartItem$.inboundSchema).optional(),
            total: Amount$.inboundSchema,
            tax: Amount$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                order_reference: "orderReference",
                order_description: "orderDescription",
                display_id: "displayId",
            });
        });

    export type Outbound = {
        order_reference: string;
        order_description?: string | undefined;
        display_id?: string | undefined;
        shipments?: Array<CartShipment$.Outbound> | undefined;
        discounts?: Array<CartDiscount$.Outbound> | undefined;
        items?: Array<CartItem$.Outbound> | undefined;
        total: Amount$.Outbound;
        tax: Amount$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Cart> = z
        .object({
            orderReference: z.string(),
            orderDescription: z.string().optional(),
            displayId: z.string().optional(),
            shipments: z.array(CartShipment$.outboundSchema).optional(),
            discounts: z.array(CartDiscount$.outboundSchema).optional(),
            items: z.array(CartItem$.outboundSchema).optional(),
            total: Amount$.outboundSchema,
            tax: Amount$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                orderReference: "order_reference",
                orderDescription: "order_description",
                displayId: "display_id",
            });
        });
}
