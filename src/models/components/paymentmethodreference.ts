/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export enum PaymentMethodReferenceTag {
    Id = "id",
}

export type PaymentMethodReference = {
    dotTag: PaymentMethodReferenceTag;
    /**
     * Payment ID of the saved Bolt Payment method.
     */
    id: string;
};

/** @internal */
export namespace PaymentMethodReferenceTag$ {
    export const inboundSchema = z.nativeEnum(PaymentMethodReferenceTag);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PaymentMethodReference$ {
    export const inboundSchema: z.ZodType<PaymentMethodReference, z.ZodTypeDef, unknown> = z
        .object({
            ".tag": PaymentMethodReferenceTag$.inboundSchema,
            id: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                ".tag": "dotTag",
            });
        });

    export type Outbound = {
        ".tag": string;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentMethodReference> = z
        .object({
            dotTag: PaymentMethodReferenceTag$.outboundSchema,
            id: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                dotTag: ".tag",
            });
        });
}
