/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { Expose } from "class-transformer";

export enum RefreshTokenScope {
    BoltAccountManage = "bolt.account.manage",
    BoltAccountView = "bolt.account.view",
    Openid = "openid",
}

export enum GetAccessTokenResponseScope {
    BoltAccountManage = "bolt.account.manage",
    BoltAccountView = "bolt.account.view",
    Openid = "openid",
}

export class GetAccessTokenResponse extends SpeakeasyBase {
    /**
     * A JWT token issued when the request includes the scope open_id.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id_token" })
    idToken?: string;

    /**
     * An access token you can use to make requests on behalf of a Bolt Account.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "access_token" })
    accessToken?: string;

    /**
     * Access tokenâ€™s expiration in seconds.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "expires_in" })
    expiresIn?: number;

    /**
     * A refresh token you can use to issue a brand new access token without obtaining a new authorization code.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "refresh_token" })
    refreshToken?: string;

    /**
     * The scope granted to the refresh token. Currently this will always be bolt.account.view.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "refresh_token_scope" })
    refreshTokenScope?: RefreshTokenScope[];

    /**
     * The scope granted to access token, depending on the scope granted to the authorization code as well as the scope parameter.
     *
     * @remarks
     * Options include `bolt.account.manage`, `bolt.account.view`, `openid`.'
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "scope" })
    scope?: GetAccessTokenResponseScope[];

    /**
     * The token_type will always be bearer.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "token_type" })
    tokenType?: string;
}
