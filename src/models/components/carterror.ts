/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The type of error returned
 */
export enum CartErrorTag {
    PaymentAlreadyExists = "payment_already_exists",
    CurrencyNotSupported = "currency_not_supported",
}

export type CartError = {
    /**
     * The type of error returned
     */
    dotTag: CartErrorTag;
    /**
     * A human-readable error message, which might include information specific to
     *
     * @remarks
     * the request that was made.
     *
     */
    message: string;
};

/** @internal */
export const CartErrorTag$ = z.nativeEnum(CartErrorTag);

/** @internal */
export namespace CartError$ {
    export type Inbound = {
        ".tag": CartErrorTag;
        message: string;
    };

    export const inboundSchema: z.ZodType<CartError, z.ZodTypeDef, Inbound> = z
        .object({
            ".tag": CartErrorTag$,
            message: z.string(),
        })
        .transform((v) => {
            return {
                dotTag: v[".tag"],
                message: v.message,
            };
        });

    export type Outbound = {
        ".tag": CartErrorTag;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CartError> = z
        .object({
            dotTag: CartErrorTag$,
            message: z.string(),
        })
        .transform((v) => {
            return {
                ".tag": v.dotTag,
                message: v.message,
            };
        });
}
