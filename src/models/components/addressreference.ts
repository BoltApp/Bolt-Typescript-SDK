/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    AddressReferenceExplicit,
    AddressReferenceExplicit$,
    AddressReferenceExplicitTag,
} from "./addressreferenceexplicit";
import {
    AddressReferenceId,
    AddressReferenceId$,
    AddressReferenceIdTag,
} from "./addressreferenceid";
import * as z from "zod";

export type AddressReference =
    | (AddressReferenceId & { dotTag: AddressReferenceIdTag.Id })
    | (AddressReferenceExplicit & { dotTag: AddressReferenceExplicitTag.Explicit });

/** @internal */
export namespace AddressReference$ {
    export const inboundSchema: z.ZodType<AddressReference, z.ZodTypeDef, unknown> = z.union([
        AddressReferenceId$.inboundSchema.and(
            z
                .object({ ".tag": z.literal(AddressReferenceIdTag.Id) })
                .transform((v) => ({ dotTag: v[".tag"] }))
        ),
        AddressReferenceExplicit$.inboundSchema.and(
            z
                .object({ ".tag": z.literal(AddressReferenceExplicitTag.Explicit) })
                .transform((v) => ({ dotTag: v[".tag"] }))
        ),
    ]);

    export type Outbound =
        | (AddressReferenceId$.Outbound & { ".tag": AddressReferenceIdTag.Id })
        | (AddressReferenceExplicit$.Outbound & { ".tag": AddressReferenceExplicitTag.Explicit });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddressReference> = z.union([
        AddressReferenceId$.outboundSchema.and(
            z
                .object({ dotTag: z.literal(AddressReferenceIdTag.Id) })
                .transform((v) => ({ ".tag": v.dotTag }))
        ),
        AddressReferenceExplicit$.outboundSchema.and(
            z
                .object({ dotTag: z.literal(AddressReferenceExplicitTag.Explicit) })
                .transform((v) => ({ ".tag": v.dotTag }))
        ),
    ]);
}
