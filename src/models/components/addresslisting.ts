/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The country (in its ISO 3166 alpha-2 format) associated with this address.
 */
export enum CountryCode {
    Af = "AF",
    Ax = "AX",
    Al = "AL",
    Dz = "DZ",
    As = "AS",
    Ad = "AD",
    Ao = "AO",
    Ai = "AI",
    Aq = "AQ",
    Ag = "AG",
    Ar = "AR",
    Am = "AM",
    Aw = "AW",
    Au = "AU",
    At = "AT",
    Az = "AZ",
    Bh = "BH",
    Bs = "BS",
    Bd = "BD",
    Bb = "BB",
    By = "BY",
    Be = "BE",
    Bz = "BZ",
    Bj = "BJ",
    Bm = "BM",
    Bt = "BT",
    Bo = "BO",
    Bq = "BQ",
    Ba = "BA",
    Bw = "BW",
    Bv = "BV",
    Br = "BR",
    Io = "IO",
    Bn = "BN",
    Bg = "BG",
    Bf = "BF",
    Bi = "BI",
    Kh = "KH",
    Cm = "CM",
    Ca = "CA",
    Cv = "CV",
    Ky = "KY",
    Cf = "CF",
    Td = "TD",
    Cl = "CL",
    Cn = "CN",
    Cx = "CX",
    Cc = "CC",
    Co = "CO",
    Km = "KM",
    Cg = "CG",
    Cd = "CD",
    Ck = "CK",
    Cr = "CR",
    Ci = "CI",
    Hr = "HR",
    Cu = "CU",
    Cw = "CW",
    Cy = "CY",
    Cz = "CZ",
    Dk = "DK",
    Dj = "DJ",
    Dm = "DM",
    Do = "DO",
    Ec = "EC",
    Eg = "EG",
    Sv = "SV",
    Gq = "GQ",
    Er = "ER",
    Ee = "EE",
    Et = "ET",
    Fk = "FK",
    Fo = "FO",
    Fj = "FJ",
    Fi = "FI",
    Fr = "FR",
    Gf = "GF",
    Pf = "PF",
    Tf = "TF",
    Ga = "GA",
    Gm = "GM",
    Ge = "GE",
    De = "DE",
    Gh = "GH",
    Gi = "GI",
    Gr = "GR",
    Gl = "GL",
    Gd = "GD",
    Gp = "GP",
    Gu = "GU",
    Gt = "GT",
    Gg = "GG",
    Gn = "GN",
    Gw = "GW",
    Gy = "GY",
    Ht = "HT",
    Hm = "HM",
    Va = "VA",
    Hn = "HN",
    Hk = "HK",
    Hu = "HU",
    Is = "IS",
    In = "IN",
    Id = "ID",
    Ir = "IR",
    Iq = "IQ",
    Ie = "IE",
    Im = "IM",
    Il = "IL",
    It = "IT",
    Jm = "JM",
    Jp = "JP",
    Je = "JE",
    Jo = "JO",
    Kz = "KZ",
    Ke = "KE",
    Ki = "KI",
    Kp = "KP",
    Kr = "KR",
    Kw = "KW",
    Kg = "KG",
    La = "LA",
    Lv = "LV",
    Lb = "LB",
    Ls = "LS",
    Lr = "LR",
    Ly = "LY",
    Li = "LI",
    Lt = "LT",
    Lu = "LU",
    Mo = "MO",
    Mk = "MK",
    Mg = "MG",
    Mw = "MW",
    My = "MY",
    Mv = "MV",
    Ml = "ML",
    Mt = "MT",
    Mh = "MH",
    Mq = "MQ",
    Mr = "MR",
    Mu = "MU",
    Yt = "YT",
    Mx = "MX",
    Fm = "FM",
    Md = "MD",
    Mc = "MC",
    Mn = "MN",
    Me = "ME",
    Ms = "MS",
    Ma = "MA",
    Mz = "MZ",
    Mm = "MM",
    Na = "NA",
    Nr = "NR",
    Np = "NP",
    Nl = "NL",
    Nc = "NC",
    Nz = "NZ",
    Ni = "NI",
    Ne = "NE",
    Ng = "NG",
    Nu = "NU",
    Nf = "NF",
    Mp = "MP",
    No = "NO",
    Om = "OM",
    Pk = "PK",
    Pw = "PW",
    Ps = "PS",
    Pa = "PA",
    Pg = "PG",
    Py = "PY",
    Pe = "PE",
    Ph = "PH",
    Pn = "PN",
    Pl = "PL",
    Pt = "PT",
    Pr = "PR",
    Qa = "QA",
    Re = "RE",
    Ro = "RO",
    Ru = "RU",
    Rw = "RW",
    Bl = "BL",
    Sh = "SH",
    Kn = "KN",
    Lc = "LC",
    Mf = "MF",
    Pm = "PM",
    Vc = "VC",
    Ws = "WS",
    Sm = "SM",
    St = "ST",
    Sa = "SA",
    Sn = "SN",
    Rs = "RS",
    Sc = "SC",
    Sl = "SL",
    Sg = "SG",
    Sx = "SX",
    Sk = "SK",
    Si = "SI",
    Sb = "SB",
    So = "SO",
    Za = "ZA",
    Gs = "GS",
    Ss = "SS",
    Es = "ES",
    Lk = "LK",
    Sd = "SD",
    Sr = "SR",
    Sj = "SJ",
    Sz = "SZ",
    Se = "SE",
    Ch = "CH",
    Sy = "SY",
    Tw = "TW",
    Tj = "TJ",
    Tz = "TZ",
    Th = "TH",
    Tl = "TL",
    Tg = "TG",
    Tk = "TK",
    To = "TO",
    Tt = "TT",
    Tn = "TN",
    Tr = "TR",
    Tm = "TM",
    Tc = "TC",
    Tv = "TV",
    Ug = "UG",
    Ua = "UA",
    Ae = "AE",
    Gb = "GB",
    Us = "US",
    Um = "UM",
    Uy = "UY",
    Uz = "UZ",
    Vu = "VU",
    Ve = "VE",
    Vn = "VN",
    Vg = "VG",
    Vi = "VI",
    Wf = "WF",
    Eh = "EH",
    Ye = "YE",
    Zm = "ZM",
    Zw = "ZW",
}

/**
 * A physical address.
 */
export type AddressListing = {
    /**
     * The address's unique identifier.
     */
    id: string;
    /**
     * The first name of the person associated with this address.
     */
    firstName: string;
    /**
     * The last name of the person associated with this address.
     */
    lastName: string;
    /**
     * The company associated with this address.
     */
    company?: string | undefined;
    /**
     * The street address associated with this address.
     */
    streetAddress1: string;
    /**
     * Any additional, optional, street address information associated with this address.
     */
    streetAddress2?: string | undefined;
    /**
     * The locality (e.g. city, town, etc...) associated with this address.
     */
    locality: string;
    /**
     * The postal code associated with this address.
     */
    postalCode: string;
    /**
     * The region or administrative area (e.g. state, province, county, etc...) associated with this address.
     */
    region?: string | undefined;
    /**
     * The country (in its ISO 3166 alpha-2 format) associated with this address.
     */
    countryCode: CountryCode;
    /**
     * The email address associated with this address.
     */
    email?: string | undefined;
    /**
     * The phone number associated with this address.
     */
    phone?: string | undefined;
    /**
     * Whether or not this is the default address saved.
     */
    isDefault?: boolean | undefined;
};

/**
 * A physical address.
 */
export type AddressListingInput = {
    /**
     * The first name of the person associated with this address.
     */
    firstName: string;
    /**
     * The last name of the person associated with this address.
     */
    lastName: string;
    /**
     * The company associated with this address.
     */
    company?: string | undefined;
    /**
     * The street address associated with this address.
     */
    streetAddress1: string;
    /**
     * Any additional, optional, street address information associated with this address.
     */
    streetAddress2?: string | undefined;
    /**
     * The locality (e.g. city, town, etc...) associated with this address.
     */
    locality: string;
    /**
     * The postal code associated with this address.
     */
    postalCode: string;
    /**
     * The region or administrative area (e.g. state, province, county, etc...) associated with this address.
     */
    region?: string | undefined;
    /**
     * The country (in its ISO 3166 alpha-2 format) associated with this address.
     */
    countryCode: CountryCode;
    /**
     * The email address associated with this address.
     */
    email?: string | undefined;
    /**
     * The phone number associated with this address.
     */
    phone?: string | undefined;
    /**
     * Whether or not this is the default address saved.
     */
    isDefault?: boolean | undefined;
};

/** @internal */
export const CountryCode$ = z.nativeEnum(CountryCode);

/** @internal */
export namespace AddressListing$ {
    export type Inbound = {
        id: string;
        first_name: string;
        last_name: string;
        company?: string | undefined;
        street_address1: string;
        street_address2?: string | undefined;
        locality: string;
        postal_code: string;
        region?: string | undefined;
        country_code: CountryCode;
        email?: string | undefined;
        phone?: string | undefined;
        is_default?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<AddressListing, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            company: z.string().optional(),
            street_address1: z.string(),
            street_address2: z.string().optional(),
            locality: z.string(),
            postal_code: z.string(),
            region: z.string().optional(),
            country_code: CountryCode$,
            email: z.string().optional(),
            phone: z.string().optional(),
            is_default: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                firstName: v.first_name,
                lastName: v.last_name,
                ...(v.company === undefined ? null : { company: v.company }),
                streetAddress1: v.street_address1,
                ...(v.street_address2 === undefined ? null : { streetAddress2: v.street_address2 }),
                locality: v.locality,
                postalCode: v.postal_code,
                ...(v.region === undefined ? null : { region: v.region }),
                countryCode: v.country_code,
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.is_default === undefined ? null : { isDefault: v.is_default }),
            };
        });

    export type Outbound = {
        id: string;
        first_name: string;
        last_name: string;
        company?: string | undefined;
        street_address1: string;
        street_address2?: string | undefined;
        locality: string;
        postal_code: string;
        region?: string | undefined;
        country_code: CountryCode;
        email?: string | undefined;
        phone?: string | undefined;
        is_default?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddressListing> = z
        .object({
            id: z.string(),
            firstName: z.string(),
            lastName: z.string(),
            company: z.string().optional(),
            streetAddress1: z.string(),
            streetAddress2: z.string().optional(),
            locality: z.string(),
            postalCode: z.string(),
            region: z.string().optional(),
            countryCode: CountryCode$,
            email: z.string().optional(),
            phone: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                first_name: v.firstName,
                last_name: v.lastName,
                ...(v.company === undefined ? null : { company: v.company }),
                street_address1: v.streetAddress1,
                ...(v.streetAddress2 === undefined ? null : { street_address2: v.streetAddress2 }),
                locality: v.locality,
                postal_code: v.postalCode,
                ...(v.region === undefined ? null : { region: v.region }),
                country_code: v.countryCode,
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.isDefault === undefined ? null : { is_default: v.isDefault }),
            };
        });
}

/** @internal */
export namespace AddressListingInput$ {
    export type Inbound = {
        first_name: string;
        last_name: string;
        company?: string | undefined;
        street_address1: string;
        street_address2?: string | undefined;
        locality: string;
        postal_code: string;
        region?: string | undefined;
        country_code: CountryCode;
        email?: string | undefined;
        phone?: string | undefined;
        is_default?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<AddressListingInput, z.ZodTypeDef, Inbound> = z
        .object({
            first_name: z.string(),
            last_name: z.string(),
            company: z.string().optional(),
            street_address1: z.string(),
            street_address2: z.string().optional(),
            locality: z.string(),
            postal_code: z.string(),
            region: z.string().optional(),
            country_code: CountryCode$,
            email: z.string().optional(),
            phone: z.string().optional(),
            is_default: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                firstName: v.first_name,
                lastName: v.last_name,
                ...(v.company === undefined ? null : { company: v.company }),
                streetAddress1: v.street_address1,
                ...(v.street_address2 === undefined ? null : { streetAddress2: v.street_address2 }),
                locality: v.locality,
                postalCode: v.postal_code,
                ...(v.region === undefined ? null : { region: v.region }),
                countryCode: v.country_code,
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.is_default === undefined ? null : { isDefault: v.is_default }),
            };
        });

    export type Outbound = {
        first_name: string;
        last_name: string;
        company?: string | undefined;
        street_address1: string;
        street_address2?: string | undefined;
        locality: string;
        postal_code: string;
        region?: string | undefined;
        country_code: CountryCode;
        email?: string | undefined;
        phone?: string | undefined;
        is_default?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddressListingInput> = z
        .object({
            firstName: z.string(),
            lastName: z.string(),
            company: z.string().optional(),
            streetAddress1: z.string(),
            streetAddress2: z.string().optional(),
            locality: z.string(),
            postalCode: z.string(),
            region: z.string().optional(),
            countryCode: CountryCode$,
            email: z.string().optional(),
            phone: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                first_name: v.firstName,
                last_name: v.lastName,
                ...(v.company === undefined ? null : { company: v.company }),
                street_address1: v.streetAddress1,
                ...(v.streetAddress2 === undefined ? null : { street_address2: v.streetAddress2 }),
                locality: v.locality,
                postal_code: v.postalCode,
                ...(v.region === undefined ? null : { region: v.region }),
                country_code: v.countryCode,
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.isDefault === undefined ? null : { is_default: v.isDefault }),
            };
        });
}
