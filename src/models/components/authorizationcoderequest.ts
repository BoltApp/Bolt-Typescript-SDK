/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of OAuth 2.0 grant being utilized.
 */
export enum GrantType {
    AuthorizationCode = "authorization_code",
}

export enum Scope {
    BoltAccountManage = "bolt.account.manage",
    BoltAccountView = "bolt.account.view",
    Openid = "openid",
}

export type AuthorizationCodeRequest = {
    /**
     * The type of OAuth 2.0 grant being utilized.
     */
    grantType: GrantType;
    /**
     * Fetched value using OTP value from the Authorization Modal.
     */
    code: string;
    /**
     * The OAuth client ID, which corresponds to the merchant publishable key, which can be retrieved
     *
     * @remarks
     * in the Merchant Dashboard.
     *
     */
    clientId: string;
    /**
     * The OAuth client secret, which corresponds the merchant API key, which can be retrieved in the
     *
     * @remarks
     * Merchant Dashboard.
     *
     */
    clientSecret: string;
    /**
     * The requested scopes. If the request is successful, the OAuth client will be able to perform operations requiring these scopes.
     *
     * @remarks
     *
     */
    scope: Array<Scope>;
    /**
     * A randomly generated string sent along with an authorization code. This must be included, if provided,
     *
     * @remarks
     * in order to prevent CSRF attacks. used to prevent CSRF attacks.
     *
     */
    state?: string | undefined;
};

/** @internal */
export const GrantType$: z.ZodNativeEnum<typeof GrantType> = z.nativeEnum(GrantType);

/** @internal */
export const Scope$: z.ZodNativeEnum<typeof Scope> = z.nativeEnum(Scope);

/** @internal */
export namespace AuthorizationCodeRequest$ {
    export const inboundSchema: z.ZodType<AuthorizationCodeRequest, z.ZodTypeDef, unknown> = z
        .object({
            grant_type: GrantType$,
            code: z.string(),
            client_id: z.string(),
            client_secret: z.string(),
            scope: z.array(Scope$),
            state: z.string().optional(),
        })
        .transform((v) => {
            return {
                grantType: v.grant_type,
                code: v.code,
                clientId: v.client_id,
                clientSecret: v.client_secret,
                scope: v.scope,
                ...(v.state === undefined ? null : { state: v.state }),
            };
        });

    export type Outbound = {
        grant_type: GrantType;
        code: string;
        client_id: string;
        client_secret: string;
        scope: Array<Scope>;
        state?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthorizationCodeRequest> = z
        .object({
            grantType: GrantType$,
            code: z.string(),
            clientId: z.string(),
            clientSecret: z.string(),
            scope: z.array(Scope$),
            state: z.string().optional(),
        })
        .transform((v) => {
            return {
                grant_type: v.grantType,
                code: v.code,
                client_id: v.clientId,
                client_secret: v.clientSecret,
                scope: v.scope,
                ...(v.state === undefined ? null : { state: v.state }),
            };
        });
}
