/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Cart, Cart$ } from "./cart";
import { z } from "zod";

export type PaymentInitializeRequest = {
    cart: Cart;
    paymentMethod?: any | undefined;
};

/** @internal */
export namespace PaymentInitializeRequest$ {
    export type Inbound = {
        cart: Cart$.Inbound;
        payment_method?: any | undefined;
    };

    export const inboundSchema: z.ZodType<PaymentInitializeRequest, z.ZodTypeDef, Inbound> = z
        .object({
            cart: Cart$.inboundSchema,
            payment_method: z.any().optional(),
        })
        .transform((v) => {
            return {
                cart: v.cart,
                ...(v.payment_method === undefined ? null : { paymentMethod: v.payment_method }),
            };
        });

    export type Outbound = {
        cart: Cart$.Outbound;
        payment_method?: any | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentInitializeRequest> = z
        .object({
            cart: Cart$.outboundSchema,
            paymentMethod: z.any().optional(),
        })
        .transform((v) => {
            return {
                cart: v.cart,
                ...(v.paymentMethod === undefined ? null : { payment_method: v.paymentMethod }),
            };
        });
}
