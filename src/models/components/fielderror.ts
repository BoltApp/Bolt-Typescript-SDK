/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of error returned
 */
export enum FieldErrorTag {
    InvalidInputParameter = "invalid_input_parameter",
}

/**
 * An error that pertains to validation of a specific field in the request.
 */
export type FieldError = {
    /**
     * The type of error returned
     */
    dotTag: FieldErrorTag;
    /**
     * A human-readable error message, which might include information specific to
     *
     * @remarks
     * the request that was made.
     *
     */
    message: string;
    /**
     * The field (in its hierarchical form) that is failing validation.
     */
    field: string;
};

/** @internal */
export const FieldErrorTag$ = z.nativeEnum(FieldErrorTag);

/** @internal */
export namespace FieldError$ {
    export type Inbound = {
        ".tag": FieldErrorTag;
        message: string;
        field: string;
    };

    export const inboundSchema: z.ZodType<FieldError, z.ZodTypeDef, Inbound> = z
        .object({
            ".tag": FieldErrorTag$,
            message: z.string(),
            field: z.string(),
        })
        .transform((v) => {
            return {
                dotTag: v[".tag"],
                message: v.message,
                field: v.field,
            };
        });

    export type Outbound = {
        ".tag": FieldErrorTag;
        message: string;
        field: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FieldError> = z
        .object({
            dotTag: FieldErrorTag$,
            message: z.string(),
            field: z.string(),
        })
        .transform((v) => {
            return {
                ".tag": v.dotTag,
                message: v.message,
                field: v.field,
            };
        });
}
