/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Transaction, Transaction$ } from "./transaction";
import * as z from "zod";

export type OrderResponse = {
    id: string;
    transaction: Transaction;
};

/** @internal */
export namespace OrderResponse$ {
    export type Inbound = {
        id: string;
        transaction: Transaction$.Inbound;
    };

    export const inboundSchema: z.ZodType<OrderResponse, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            transaction: Transaction$.inboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                transaction: v.transaction,
            };
        });

    export type Outbound = {
        id: string;
        transaction: Transaction$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrderResponse> = z
        .object({
            id: z.string(),
            transaction: Transaction$.outboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                transaction: v.transaction,
            };
        });
}
