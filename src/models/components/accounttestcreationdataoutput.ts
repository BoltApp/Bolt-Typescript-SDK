/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum EmailState {
    Missing = "missing",
    Unverified = "unverified",
    Verified = "verified",
}

export enum PhoneState {
    Missing = "missing",
    Unverified = "unverified",
    Verified = "verified",
}

export type AccountTestCreationDataOutput = {
    email: string;
    emailState: EmailState;
    phone: string;
    phoneState: PhoneState;
    otpCode: string;
    oauthCode: string;
};

export type AccountTestCreationData = {
    emailState: EmailState;
    phoneState: PhoneState;
    isMigrated?: boolean | undefined;
    hasAddress?: boolean | undefined;
    hasCreditCard?: boolean | undefined;
};

/** @internal */
export namespace EmailState$ {
    export const inboundSchema = z.nativeEnum(EmailState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PhoneState$ {
    export const inboundSchema = z.nativeEnum(PhoneState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AccountTestCreationDataOutput$ {
    export const inboundSchema: z.ZodType<AccountTestCreationDataOutput, z.ZodTypeDef, unknown> = z
        .object({
            email: z.string(),
            email_state: EmailState$.inboundSchema,
            phone: z.string(),
            phone_state: PhoneState$.inboundSchema,
            otp_code: z.string(),
            oauth_code: z.string(),
        })
        .transform((v) => {
            return {
                email: v.email,
                emailState: v.email_state,
                phone: v.phone,
                phoneState: v.phone_state,
                otpCode: v.otp_code,
                oauthCode: v.oauth_code,
            };
        });

    export type Outbound = {
        email: string;
        email_state: string;
        phone: string;
        phone_state: string;
        otp_code: string;
        oauth_code: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountTestCreationDataOutput> =
        z
            .object({
                email: z.string(),
                emailState: EmailState$.outboundSchema,
                phone: z.string(),
                phoneState: PhoneState$.outboundSchema,
                otpCode: z.string(),
                oauthCode: z.string(),
            })
            .transform((v) => {
                return {
                    email: v.email,
                    email_state: v.emailState,
                    phone: v.phone,
                    phone_state: v.phoneState,
                    otp_code: v.otpCode,
                    oauth_code: v.oauthCode,
                };
            });
}

/** @internal */
export namespace AccountTestCreationData$ {
    export const inboundSchema: z.ZodType<AccountTestCreationData, z.ZodTypeDef, unknown> = z
        .object({
            email_state: EmailState$.inboundSchema,
            phone_state: PhoneState$.inboundSchema,
            is_migrated: z.boolean().optional(),
            has_address: z.boolean().optional(),
            has_credit_card: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                emailState: v.email_state,
                phoneState: v.phone_state,
                ...(v.is_migrated === undefined ? null : { isMigrated: v.is_migrated }),
                ...(v.has_address === undefined ? null : { hasAddress: v.has_address }),
                ...(v.has_credit_card === undefined ? null : { hasCreditCard: v.has_credit_card }),
            };
        });

    export type Outbound = {
        email_state: string;
        phone_state: string;
        is_migrated?: boolean | undefined;
        has_address?: boolean | undefined;
        has_credit_card?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AccountTestCreationData> = z
        .object({
            emailState: EmailState$.outboundSchema,
            phoneState: PhoneState$.outboundSchema,
            isMigrated: z.boolean().optional(),
            hasAddress: z.boolean().optional(),
            hasCreditCard: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                email_state: v.emailState,
                phone_state: v.phoneState,
                ...(v.isMigrated === undefined ? null : { is_migrated: v.isMigrated }),
                ...(v.hasAddress === undefined ? null : { has_address: v.hasAddress }),
                ...(v.hasCreditCard === undefined ? null : { has_credit_card: v.hasCreditCard }),
            };
        });
}
