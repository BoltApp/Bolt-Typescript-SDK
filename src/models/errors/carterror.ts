/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The type of error returned
 */
export enum SchemasCartErrorTag {
    PaymentAlreadyExists = "payment_already_exists",
    CurrencyNotSupported = "currency_not_supported",
}

export type CartErrorData = {
    /**
     * The type of error returned
     */
    dotTag: SchemasCartErrorTag;
    /**
     * A human-readable error message, which might include information specific to the request that was made.
     */
    message: string;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse1?: Response | undefined;
};

export class CartError extends Error {
    /**
     * The type of error returned
     */
    dotTag: SchemasCartErrorTag;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse1?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: CartErrorData;

    constructor(err: CartErrorData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.dotTag = err.dotTag;
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }
        if (err.rawResponse1 != null) {
            this.rawResponse1 = err.rawResponse1;
        }

        this.name = "CartError";
    }
}

/** @internal */
export const SchemasCartErrorTag$inboundSchema: z.ZodNativeEnum<typeof SchemasCartErrorTag> =
    z.nativeEnum(SchemasCartErrorTag);

/** @internal */
export const SchemasCartErrorTag$outboundSchema: z.ZodNativeEnum<typeof SchemasCartErrorTag> =
    SchemasCartErrorTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasCartErrorTag$ {
    /** @deprecated use `SchemasCartErrorTag$inboundSchema` instead. */
    export const inboundSchema = SchemasCartErrorTag$inboundSchema;
    /** @deprecated use `SchemasCartErrorTag$outboundSchema` instead. */
    export const outboundSchema = SchemasCartErrorTag$outboundSchema;
}

/** @internal */
export const CartError$inboundSchema: z.ZodType<CartError, z.ZodTypeDef, unknown> = z
    .object({
        ".tag": SchemasCartErrorTag$inboundSchema,
        message: z.string(),
        RawResponse: z.instanceof(Response).optional(),
        RawResponse1: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            ".tag": "dotTag",
            RawResponse: "rawResponse",
            RawResponse1: "rawResponse1",
        });

        return new CartError(remapped);
    });

/** @internal */
export type CartError$Outbound = {
    ".tag": string;
    message: string;
    RawResponse?: never | undefined;
    RawResponse1?: never | undefined;
};

/** @internal */
export const CartError$outboundSchema: z.ZodType<CartError$Outbound, z.ZodTypeDef, CartError> = z
    .instanceof(CartError)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                dotTag: SchemasCartErrorTag$outboundSchema,
                message: z.string(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
                rawResponse1: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    dotTag: ".tag",
                    rawResponse: "RawResponse",
                    rawResponse1: "RawResponse1",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CartError$ {
    /** @deprecated use `CartError$inboundSchema` instead. */
    export const inboundSchema = CartError$inboundSchema;
    /** @deprecated use `CartError$outboundSchema` instead. */
    export const outboundSchema = CartError$outboundSchema;
    /** @deprecated use `CartError$Outbound` instead. */
    export type Outbound = CartError$Outbound;
}
