/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CartError, CartError$ } from "./carterror.js";
import { CreditCardError, CreditCardError$ } from "./creditcarderror.js";
import { ErrorT, ErrorT$ } from "./error.js";
import { FieldError, FieldError$ } from "./fielderror.js";
import * as z from "zod";

/**
 * The payment operation cannot complete
 */
export type GuestPaymentsInitializeResponseBody = ErrorT | FieldError | CartError | CreditCardError;

/** @internal */
export namespace GuestPaymentsInitializeResponseBody$ {
    export const inboundSchema: z.ZodType<
        GuestPaymentsInitializeResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.union([
        ErrorT$.inboundSchema,
        FieldError$.inboundSchema,
        CartError$.inboundSchema,
        CreditCardError$.inboundSchema,
    ]);

    export type Outbound =
        | ErrorT$.Outbound
        | FieldError$.Outbound
        | CartError$.Outbound
        | CreditCardError$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GuestPaymentsInitializeResponseBody
    > = z.union([
        ErrorT$.outboundSchema,
        FieldError$.outboundSchema,
        CartError$.outboundSchema,
        CreditCardError$.outboundSchema,
    ]);
}
