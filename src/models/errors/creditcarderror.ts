/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The type of error returned
 */
export enum SchemasCreditCardErrorTag {
    Declined = "declined",
    DeclinedInvalidAmount = "declined_invalid_amount",
    DeclinedInvalidCvv = "declined_invalid_cvv",
    DeclinedInvalidMerchant = "declined_invalid_merchant",
    DeclinedInvalidNumber = "declined_invalid_number",
    DeclinedExpired = "declined_expired",
    DeclinedCallIssuer = "declined_call_issuer",
    DeclinedUnsupported = "declined_unsupported",
}

export type CreditCardErrorData = {
    /**
     * The type of error returned
     */
    dotTag: SchemasCreditCardErrorTag;
    /**
     * A human-readable error message, which might include information specific to the request that was made.
     */
    message: string;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse1?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse2?: Response | undefined;
};

export class CreditCardError extends Error {
    /**
     * The type of error returned
     */
    dotTag: SchemasCreditCardErrorTag;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse1?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse2?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: CreditCardErrorData;

    constructor(err: CreditCardErrorData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.dotTag = err.dotTag;
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }
        if (err.rawResponse1 != null) {
            this.rawResponse1 = err.rawResponse1;
        }
        if (err.rawResponse2 != null) {
            this.rawResponse2 = err.rawResponse2;
        }

        this.name = "CreditCardError";
    }
}

/** @internal */
export const SchemasCreditCardErrorTag$inboundSchema: z.ZodNativeEnum<
    typeof SchemasCreditCardErrorTag
> = z.nativeEnum(SchemasCreditCardErrorTag);

/** @internal */
export const SchemasCreditCardErrorTag$outboundSchema: z.ZodNativeEnum<
    typeof SchemasCreditCardErrorTag
> = SchemasCreditCardErrorTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasCreditCardErrorTag$ {
    /** @deprecated use `SchemasCreditCardErrorTag$inboundSchema` instead. */
    export const inboundSchema = SchemasCreditCardErrorTag$inboundSchema;
    /** @deprecated use `SchemasCreditCardErrorTag$outboundSchema` instead. */
    export const outboundSchema = SchemasCreditCardErrorTag$outboundSchema;
}

/** @internal */
export const CreditCardError$inboundSchema: z.ZodType<CreditCardError, z.ZodTypeDef, unknown> = z
    .object({
        ".tag": SchemasCreditCardErrorTag$inboundSchema,
        message: z.string(),
        RawResponse: z.instanceof(Response).optional(),
        RawResponse1: z.instanceof(Response).optional(),
        RawResponse2: z.instanceof(Response).optional(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            ".tag": "dotTag",
            RawResponse: "rawResponse",
            RawResponse1: "rawResponse1",
            RawResponse2: "rawResponse2",
        });

        return new CreditCardError(remapped);
    });

/** @internal */
export type CreditCardError$Outbound = {
    ".tag": string;
    message: string;
    RawResponse?: never | undefined;
    RawResponse1?: never | undefined;
    RawResponse2?: never | undefined;
};

/** @internal */
export const CreditCardError$outboundSchema: z.ZodType<
    CreditCardError$Outbound,
    z.ZodTypeDef,
    CreditCardError
> = z
    .instanceof(CreditCardError)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                dotTag: SchemasCreditCardErrorTag$outboundSchema,
                message: z.string(),
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
                rawResponse1: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
                rawResponse2: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    dotTag: ".tag",
                    rawResponse: "RawResponse",
                    rawResponse1: "RawResponse1",
                    rawResponse2: "RawResponse2",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreditCardError$ {
    /** @deprecated use `CreditCardError$inboundSchema` instead. */
    export const inboundSchema = CreditCardError$inboundSchema;
    /** @deprecated use `CreditCardError$outboundSchema` instead. */
    export const outboundSchema = CreditCardError$outboundSchema;
    /** @deprecated use `CreditCardError$Outbound` instead. */
    export type Outbound = CreditCardError$Outbound;
}
