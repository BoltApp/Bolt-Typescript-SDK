/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of error returned
 */
export enum SchemasCreditCardErrorTag {
    Declined = "declined",
    DeclinedInvalidAmount = "declined_invalid_amount",
    DeclinedInvalidCvv = "declined_invalid_cvv",
    DeclinedInvalidMerchant = "declined_invalid_merchant",
    DeclinedInvalidNumber = "declined_invalid_number",
    DeclinedExpired = "declined_expired",
    DeclinedCallIssuer = "declined_call_issuer",
    DeclinedUnsupported = "declined_unsupported",
}

export type CreditCardErrorData = {
    /**
     * The type of error returned
     */
    dotTag: SchemasCreditCardErrorTag;
    /**
     * A human-readable error message, which might include information specific to
     *
     * @remarks
     * the request that was made.
     *
     */
    message: string;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse1?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse2?: Response | undefined;
};

export class CreditCardError extends Error {
    /**
     * The type of error returned
     */
    dotTag: SchemasCreditCardErrorTag;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse1?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse2?: Response | undefined;

    /** The original data that was passed to this error instance. */
    data$: CreditCardErrorData;

    constructor(err: CreditCardErrorData) {
        super("");
        this.data$ = err;

        this.dotTag = err.dotTag;
        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }
        if (err.rawResponse1 != null) {
            this.rawResponse1 = err.rawResponse1;
        }
        if (err.rawResponse2 != null) {
            this.rawResponse2 = err.rawResponse2;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "CreditCardError";
    }
}

/** @internal */
export const SchemasCreditCardErrorTag$: z.ZodNativeEnum<typeof SchemasCreditCardErrorTag> =
    z.nativeEnum(SchemasCreditCardErrorTag);

/** @internal */
export namespace CreditCardError$ {
    export type Inbound = {
        ".tag": SchemasCreditCardErrorTag;
        message: string;
        RawResponse?: Response | undefined;
        RawResponse1?: Response | undefined;
        RawResponse2?: Response | undefined;
    };

    export const inboundSchema: z.ZodType<CreditCardError, z.ZodTypeDef, Inbound> = z
        .object({
            ".tag": SchemasCreditCardErrorTag$,
            message: z.string(),
            RawResponse: z.instanceof(Response).optional(),
            RawResponse1: z.instanceof(Response).optional(),
            RawResponse2: z.instanceof(Response).optional(),
        })
        .transform((v) => {
            return new CreditCardError({
                dotTag: v[".tag"],
                message: v.message,
                ...(v.RawResponse === undefined ? null : { rawResponse: v.RawResponse }),
                ...(v.RawResponse1 === undefined ? null : { rawResponse1: v.RawResponse1 }),
                ...(v.RawResponse2 === undefined ? null : { rawResponse2: v.RawResponse2 }),
            });
        });

    export type Outbound = {
        ".tag": SchemasCreditCardErrorTag;
        message: string;
        RawResponse?: never | undefined;
        RawResponse1?: never | undefined;
        RawResponse2?: never | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreditCardError> = z
        .instanceof(CreditCardError)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    dotTag: SchemasCreditCardErrorTag$,
                    message: z.string(),
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                    rawResponse1: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                    rawResponse2: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                })
                .transform((v) => {
                    return {
                        ".tag": v.dotTag,
                        message: v.message,
                        ...(v.rawResponse === undefined ? null : { RawResponse: v.rawResponse }),
                        ...(v.rawResponse1 === undefined ? null : { RawResponse1: v.rawResponse1 }),
                        ...(v.rawResponse2 === undefined ? null : { RawResponse2: v.rawResponse2 }),
                    };
                })
        );
}
