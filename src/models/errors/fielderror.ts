/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * The type of error returned
 */
export enum SchemasTag {
  InvalidInputParameter = "invalid_input_parameter",
}

/**
 * An error that pertains to validation of a specific field in the request.
 */
export type FieldErrorData = {
  /**
   * The type of error returned
   */
  dotTag: SchemasTag;
  /**
   * A human-readable error message, which might include information specific to the request that was made.
   */
  message: string;
  /**
   * The field (in its hierarchical form) that is failing validation.
   */
  field: string;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
};

/**
 * An error that pertains to validation of a specific field in the request.
 */
export class FieldError extends Error {
  /**
   * The type of error returned
   */
  dotTag: SchemasTag;
  /**
   * The field (in its hierarchical form) that is failing validation.
   */
  field: string;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldErrorData;

  constructor(err: FieldErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.dotTag = err.dotTag;
    this.field = err.field;
    if (err.rawResponse != null) this.rawResponse = err.rawResponse;

    this.name = "FieldError";
  }
}

/** @internal */
export const SchemasTag$inboundSchema: z.ZodNativeEnum<typeof SchemasTag> = z
  .nativeEnum(SchemasTag);

/** @internal */
export const SchemasTag$outboundSchema: z.ZodNativeEnum<typeof SchemasTag> =
  SchemasTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasTag$ {
  /** @deprecated use `SchemasTag$inboundSchema` instead. */
  export const inboundSchema = SchemasTag$inboundSchema;
  /** @deprecated use `SchemasTag$outboundSchema` instead. */
  export const outboundSchema = SchemasTag$outboundSchema;
}

/** @internal */
export const FieldError$inboundSchema: z.ZodType<
  FieldError,
  z.ZodTypeDef,
  unknown
> = z.object({
  ".tag": SchemasTag$inboundSchema,
  message: z.string(),
  field: z.string(),
  RawResponse: z.instanceof(Response).optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      ".tag": "dotTag",
      "RawResponse": "rawResponse",
    });

    return new FieldError(remapped);
  });

/** @internal */
export type FieldError$Outbound = {
  ".tag": string;
  message: string;
  field: string;
  RawResponse?: never | undefined;
};

/** @internal */
export const FieldError$outboundSchema: z.ZodType<
  FieldError$Outbound,
  z.ZodTypeDef,
  FieldError
> = z.instanceof(FieldError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      dotTag: SchemasTag$outboundSchema,
      message: z.string(),
      field: z.string(),
      rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
    }).transform((v) => {
      return remap$(v, {
        dotTag: ".tag",
        rawResponse: "RawResponse",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldError$ {
  /** @deprecated use `FieldError$inboundSchema` instead. */
  export const inboundSchema = FieldError$inboundSchema;
  /** @deprecated use `FieldError$outboundSchema` instead. */
  export const outboundSchema = FieldError$outboundSchema;
  /** @deprecated use `FieldError$Outbound` instead. */
  export type Outbound = FieldError$Outbound;
}
