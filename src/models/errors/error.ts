/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The type of error returned
 */
export enum DotTag {
    UnprocessableRequest = "unprocessable_request",
    MissingInputParameter = "missing_input_parameter",
    InvalidInputParameter = "invalid_input_parameter",
    NotFound = "not_found",
}

/**
 * An error has occurred, and further details are contained in the response
 */
export type ErrorTData = {
    /**
     * The type of error returned
     */
    dotTag: DotTag;
    /**
     * A human-readable error message, which might include information specific to
     *
     * @remarks
     * the request that was made.
     *
     */
    message: string;
};

/**
 * An error has occurred, and further details are contained in the response
 */
export class ErrorT extends Error {
    /**
     * The type of error returned
     */
    dotTag: DotTag;

    /** The original data that was passed to this error instance. */
    data$: ErrorTData;

    constructor(err: ErrorTData, options?: ErrorOptions) {
        super("", options);
        this.data$ = err;

        this.dotTag = err.dotTag;

        const msg = "message" in err && typeof err.message === "string" ? err.message : "";
        const content = JSON.stringify(err);
        this.message = [msg, content].filter(Boolean).join("\n");

        this.name = "ErrorT";
    }
}

/** @internal */
export const DotTag$ = z.nativeEnum(DotTag);

/** @internal */
export namespace ErrorT$ {
    export type Inbound = {
        ".tag": DotTag;
        message: string;
    };

    export const inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, Inbound> = z
        .object({
            ".tag": DotTag$,
            message: z.string(),
        })
        .transform((v) => {
            return new ErrorT({
                dotTag: v[".tag"],
                message: v.message,
            });
        });
    export type Outbound = {
        ".tag": DotTag;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorT> = z
        .instanceof(ErrorT)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    dotTag: DotTag$,
                    message: z.string(),
                })
                .transform((v) => {
                    return {
                        ".tag": v.dotTag,
                        message: v.message,
                    };
                })
        );
}
