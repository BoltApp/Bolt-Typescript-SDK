/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { BoltTypescriptSDKCore } from "../core.js";
import { encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";

/**
 * Delete an existing payment method
 *
 * @remarks
 * Delete an existing payment method. Deleting a payment method does not invalidate or remove it from transactions or orders that are associated with it.
 */
export async function accountDeletePaymentMethod(
  client: BoltTypescriptSDKCore,
  id: string,
  xPublishableKey: string,
  xMerchantClientId: string,
  options?: RequestOptions,
): Promise<
  Result<
    operations.AccountPaymentMethodDeleteResponse,
    | errors.AccountPaymentMethodDeleteResponseBody
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const input: operations.AccountPaymentMethodDeleteRequest = {
    id: id,
    xPublishableKey: xPublishableKey,
    xMerchantClientId: xMerchantClientId,
  };

  const parsed = safeParse(
    input,
    (value) =>
      operations.AccountPaymentMethodDeleteRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = null;

  const pathParams = {
    id: encodeSimple("id", payload.id, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/account/payment-methods/{id}")(pathParams);

  const headers = new Headers({
    Accept: "application/json",
    "X-Merchant-Client-Id": encodeSimple(
      "X-Merchant-Client-Id",
      payload["X-Merchant-Client-Id"],
      { explode: false, charEncoding: "none" },
    ),
    "X-Publishable-Key": encodeSimple(
      "X-Publishable-Key",
      payload["X-Publishable-Key"],
      { explode: false, charEncoding: "none" },
    ),
  });

  const securityInput = await extractSecurity(client._options.security);
  const context = {
    operationID: "accountPaymentMethodDelete",
    oAuth2Scopes: [],
    securitySource: client._options.security,
  };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "DELETE",
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: options?.retries
      || client._options.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields = {
    ContentType: response.headers.get("content-type")
      ?? "application/octet-stream",
    StatusCode: response.status,
    RawResponse: response,
    Headers: {},
  };

  const [result] = await M.match<
    operations.AccountPaymentMethodDeleteResponse,
    | errors.AccountPaymentMethodDeleteResponseBody
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.jsonErr(
      "4XX",
      errors.AccountPaymentMethodDeleteResponseBody$inboundSchema,
    ),
    M.fail("5XX"),
    M.nil(
      [200, "default"],
      operations.AccountPaymentMethodDeleteResponse$inboundSchema,
    ),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return result;
  }

  return result;
}
